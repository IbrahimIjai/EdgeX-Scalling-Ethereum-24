{
  "address": "0x6707990A7Dc8184ebB5CaDaB214B2383498DA633",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAvailableStoke",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_storeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_productImageUrl",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "BuyEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "attestationId",
          "type": "uint64"
        }
      ],
      "name": "CommentEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "attestionId",
          "type": "uint64"
        }
      ],
      "name": "DeliveredEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum VotesType",
          "name": "typeOFVote",
          "type": "uint8"
        }
      ],
      "name": "VoteEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "StoreName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "comment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deliveredCompleted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "downVotes",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCustomerDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeOfPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "attestationId",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct PurchaseDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productImageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaId_Comment",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaId_Invoice",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "schemaId_",
          "type": "uint64"
        }
      ],
      "name": "setCommentSchemaID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "schemaId_",
          "type": "uint64"
        }
      ],
      "name": "setInvoicetSchemaID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "setSPInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spInstance",
      "outputs": [
        {
          "internalType": "contract ISP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAvailableStoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trxIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upVotes",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VotesType",
          "name": "typeOFVote",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf30ac48209fbe5c2bd5ddb6ada9a8601873af42418325b92acc2c30b3ee5429e",
  "receipt": {
    "to": null,
    "from": "0xbFEaDb211974Ce290A0d8bc51b6FB230bde6bf5A",
    "contractAddress": "0x6707990A7Dc8184ebB5CaDaB214B2383498DA633",
    "transactionIndex": 2,
    "gasUsed": "1451714",
    "logsBloom": "0x
    "blockHash": "0x482e7e4b343c09e8200fc5e5a5f911f5920032f8016cd61ac267bfb60b8e66bd",
    "transactionHash": "0xf30ac48209fbe5c2bd5ddb6ada9a8601873af42418325b92acc2c30b3ee5429e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 35501321,
        "transactionHash": "0xf30ac48209fbe5c2bd5ddb6ada9a8601873af42418325b92acc2c30b3ee5429e",
        "address": "0x6707990A7Dc8184ebB5CaDaB214B2383498DA633",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bfeadb211974ce290a0d8bc51b6fb230bde6bf5a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x482e7e4b343c09e8200fc5e5a5f911f5920032f8016cd61ac267bfb60b8e66bd"
      }
    ],
    "blockNumber": 35501321,
    "cumulativeGasUsed": "3150317",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100000000000000,
    10000,
    "Iphone store",
    "Iphone 12",
    "/iphone.png"
  ],
  "numDeployments": 1,
  "solcInputHash": "e07c597a4bfb5c1f27a92db638ea112a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAvailableStoke\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_storeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productImageUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BuyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"name\":\"CommentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"attestionId\",\"type\":\"uint64\"}],\"name\":\"DeliveredEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum VotesType\",\"name\":\"typeOFVote\",\"type\":\"uint8\"}],\"name\":\"VoteEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StoreName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"comment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deliveredCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"downVotes\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCustomerDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeOfPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct PurchaseDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productImageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaId_Comment\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaId_Invoice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"schemaId_\",\"type\":\"uint64\"}],\"name\":\"setCommentSchemaID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"schemaId_\",\"type\":\"uint64\"}],\"name\":\"setInvoicetSchemaID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"setSPInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailableStoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trxIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upVotes\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VotesType\",\"name\":\"typeOFVote\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Store.sol\":\"Product\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/Store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\r\\nimport { Attestation } from \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\r\\nimport { DataLocation } from \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { ShoppingStatus, VotesType, PurchaseDetails, CommentDetails, BuyEvent, DeliveredEvent, CommentEvent, VoteEvent } from \\\"./utils.sol\\\";\\r\\n\\r\\n//SCHEMAS\\r\\n//32 data\\\":[{\\\"name\\\":\\\"buyerAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"transactionIndex\\\",\\\"type\\\":\\\"uint256\\\"}]}\\r\\n//33 data\\\":[{\\\"name\\\":\\\"comment\\\",\\\"type\\\":\\\"string\\\"}]}\\r\\n\\r\\ncontract Product is Ownable {\\r\\n\\tISP public spInstance;\\r\\n\\tuint64 public schemaId_Invoice;\\r\\n\\tuint64 public schemaId_Comment;\\r\\n\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing SafeMath for uint64;\\r\\n\\r\\n\\tuint256 public totalAvailableStoke;\\r\\n\\r\\n\\tuint256 public pricePerOne;\\r\\n\\tuint256 public discount;\\r\\n\\r\\n\\tuint64 public upVotes;\\r\\n\\tuint64 public downVotes;\\r\\n\\r\\n\\tuint64 public trxIndex;\\r\\n\\r\\n\\tuint256 public totalPurchases;\\r\\n\\r\\n\\tstring public productName;\\r\\n\\tstring public StoreName;\\r\\n\\tstring public productImageUrl;\\r\\n\\r\\n\\t//customer can only place a single order at a time\\r\\n\\r\\n\\tmapping(address customer => mapping(uint256 trxIndex => PurchaseDetails)) customerHistory;\\r\\n\\r\\n\\tmapping(address customer => ShoppingStatus) customerCurShoppingStatus;\\r\\n\\r\\n\\t//keep customer vote type\\r\\n\\tmapping(address customer => VotesType) customerVote;\\r\\n\\t//keep customer Coment\\r\\n\\tmapping(address customer => CommentDetails) buyerCommented;\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\tuint256 _pricePerOne,\\r\\n\\t\\tuint256 _totalAvailableStoke,\\r\\n\\t\\tstring memory _productName,\\r\\n\\t\\tstring memory _storeName,\\r\\n\\t\\tstring memory _productImageUrl\\r\\n\\t) Ownable() {\\r\\n\\t\\tpricePerOne = _pricePerOne;\\r\\n\\t\\ttotalAvailableStoke = _totalAvailableStoke;\\r\\n\\t\\tproductName = _productName;\\r\\n\\t\\tStoreName = _storeName;\\r\\n\\t\\tproductImageUrl = _productImageUrl;\\r\\n\\t}\\r\\n\\r\\n\\tfunction buy(uint256 quantity) public payable {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tcustomerCurShoppingStatus[msg.sender] ==\\r\\n\\t\\t\\t\\tShoppingStatus.AWAITINGDELIVERY,\\r\\n\\t\\t\\t\\\"You can't place an order while awaiting delivery\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(totalAvailableStoke >= quantity, \\\"Insufficient stock!\\\");\\r\\n\\r\\n\\t\\tuint256 price = quantity.mul(pricePerOne);\\r\\n\\r\\n\\t\\trequire(msg.value >= pricePerOne, \\\"Insufficient payment sent!\\\");\\r\\n\\t\\ttrxIndex++;\\r\\n\\t\\ttotalAvailableStoke = totalAvailableStoke.sub(quantity);\\r\\n\\t\\tcustomerHistory[msg.sender][trxIndex] = PurchaseDetails(\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\t0,\\r\\n\\t\\t\\tquantity,\\r\\n\\t\\t\\tpricePerOne\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tcustomerCurShoppingStatus[msg.sender] = ShoppingStatus.AWAITINGDELIVERY;\\r\\n\\t\\temit BuyEvent(msg.sender, price, quantity, trxIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deliveredCompleted(\\r\\n\\t\\taddress buyer,\\r\\n\\t\\tbytes memory data\\r\\n\\t) public onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tcustomerCurShoppingStatus[buyer] == ShoppingStatus.AWAITINGDELIVERY,\\r\\n\\t\\t\\t\\\"No buy order found\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tbytes[] memory recipients = new bytes[](1);\\r\\n\\t\\trecipients[0] = abi.encode(msg.sender);\\r\\n\\t\\tcustomerCurShoppingStatus[buyer] = ShoppingStatus.DELIVERED;\\r\\n\\t\\tAttestation memory a = Attestation({\\r\\n\\t\\t\\tschemaId: schemaId_Invoice,\\r\\n\\t\\t\\tlinkedAttestationId: 0,\\r\\n\\t\\t\\tattestTimestamp: 0,\\r\\n\\t\\t\\trevokeTimestamp: 0,\\r\\n\\t\\t\\tattester: address(this),\\r\\n\\t\\t\\tvalidUntil: 0,\\r\\n\\t\\t\\tdataLocation: DataLocation.ONCHAIN,\\r\\n\\t\\t\\trevoked: false,\\r\\n\\t\\t\\trecipients: recipients,\\r\\n\\t\\t\\tdata: data\\r\\n\\t\\t});\\r\\n\\t\\tuint64 attestationId = spInstance.attest(a, \\\"\\\", \\\"\\\", \\\"\\\");\\r\\n\\t\\tcustomerHistory[msg.sender][trxIndex].attestationId = attestationId;\\r\\n\\t\\temit DeliveredEvent(buyer, attestationId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction comment(bytes memory data) public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tcustomerCurShoppingStatus[msg.sender] != ShoppingStatus.DELIVERED,\\r\\n\\t\\t\\t\\\"You need to use product before commenting\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tbytes[] memory recipients = new bytes[](1);\\r\\n\\t\\trecipients[0] = abi.encode(msg.sender);\\r\\n\\t\\tAttestation memory a = Attestation({\\r\\n\\t\\t\\tschemaId: schemaId_Comment,\\r\\n\\t\\t\\tlinkedAttestationId: 0,\\r\\n\\t\\t\\tattestTimestamp: 0,\\r\\n\\t\\t\\trevokeTimestamp: 0,\\r\\n\\t\\t\\tattester: address(this),\\r\\n\\t\\t\\tvalidUntil: 0,\\r\\n\\t\\t\\tdataLocation: DataLocation.ONCHAIN,\\r\\n\\t\\t\\trevoked: false,\\r\\n\\t\\t\\trecipients: recipients,\\r\\n\\t\\t\\tdata: data // SignScan assumes this is from `abi.encode(...)`\\r\\n\\t\\t});\\r\\n\\t\\tuint64 attestationId = spInstance.attest(a, \\\"\\\", \\\"\\\", \\\"\\\");\\r\\n\\t\\tbuyerCommented[msg.sender] = CommentDetails(attestationId, true);\\r\\n\\t\\temit CommentEvent(msg.sender, attestationId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction vote(VotesType typeOFVote) public {\\r\\n\\t\\t// check attestation for actually bought and actually delivered\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tcustomerHistory[msg.sender][trxIndex].attestationId > 0,\\r\\n\\t\\t\\t\\\"You can not vote until you product has been delivered\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (customerVote[msg.sender] == VotesType.UPVOTE) {\\r\\n\\t\\t\\tif (typeOFVote == VotesType.UPVOTE) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tupVotes.sub(1);\\r\\n\\t\\t\\t\\tdownVotes.add(1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else if (customerVote[msg.sender] == VotesType.DOWNVOTE) {\\r\\n\\t\\t\\tif (typeOFVote == VotesType.UPVOTE) {\\r\\n\\t\\t\\t\\tupVotes.add(1);\\r\\n\\t\\t\\t\\tdownVotes.sub(1);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcustomerVote[msg.sender] = typeOFVote;\\r\\n\\t\\t\\tif (typeOFVote == VotesType.UPVOTE) {\\r\\n\\t\\t\\t\\tupVotes.add(1);\\r\\n\\t\\t\\t\\tdownVotes.sub(1);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdownVotes.sub(1);\\r\\n\\t\\t\\t\\tupVotes.add(1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit VoteEvent(msg.sender, typeOFVote);\\r\\n\\t}\\r\\n\\r\\n\\t//GETTERS FUNCTION\\r\\n\\r\\n\\tfunction getCustomerDetails(\\r\\n\\t\\taddress buyer,\\r\\n\\t\\tuint256 index\\r\\n\\t) public view returns (PurchaseDetails memory) {\\r\\n\\t\\treturn customerHistory[buyer][index];\\r\\n\\t}\\r\\n\\r\\n\\t//ADMIN\\r\\n\\tfunction setSPInstance(address instance) external onlyOwner {\\r\\n\\t\\tspInstance = ISP(instance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCommentSchemaID(uint64 schemaId_) external onlyOwner {\\r\\n\\t\\tschemaId_Comment = schemaId_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setInvoicetSchemaID(uint64 schemaId_) external onlyOwner {\\r\\n\\t\\tschemaId_Invoice = schemaId_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xaabd253a8edd87cc3493debcb60a7d7445082aefbe128da7faa61d129d94071a\",\"license\":\"MIT\"},\"contracts/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nenum ShoppingStatus {\\r\\n\\tAWAITINGDELIVERY,\\r\\n\\tDELIVERED,\\r\\n\\tNO_ORDER\\r\\n}\\r\\n\\r\\nenum VotesType {\\r\\n\\tUPVOTE,\\r\\n\\tDOWNVOTE\\r\\n}\\r\\n\\r\\nstruct PurchaseDetails {\\r\\n\\tuint256 timeOfPurchase;\\r\\n\\tuint64 attestationId;\\r\\n\\tuint256 quantity;\\r\\n\\tuint256 price;\\r\\n}\\r\\n\\r\\nstruct CommentDetails {\\r\\n\\tuint64 attestationId;\\r\\n\\tbool hasCommented;\\r\\n}\\r\\n\\r\\n\\r\\n\\tevent BuyEvent(\\r\\n\\t\\taddress indexed buyer,\\r\\n\\t\\tuint256 price,\\r\\n\\t\\tuint256 quantity,\\r\\n\\t\\tuint256 indexed index\\r\\n\\t);\\r\\n\\tevent DeliveredEvent(address indexed buyer, uint64 indexed attestionId);\\r\\n\\tevent CommentEvent(address indexed buyer, uint64 attestationId);\\r\\n\\tevent VoteEvent(address buyer, VotesType typeOFVote);\",\"keccak256\":\"0x240dfb78c15b92ccbab6960dc2a0d04501742564ed809da9bfbbcd3455beef6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a3338038062001a33833981016040819052620000349162000199565b6200003f3362000081565b600485905560038490556008620000578482620002d0565b506009620000668382620002d0565b50600a620000758282620002d0565b5050505050506200039c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000f957600080fd5b81516001600160401b0380821115620001165762000116620000d1565b604051601f8301601f19908116603f01168101908282118183101715620001415762000141620000d1565b81604052838152602092508660208588010111156200015f57600080fd5b600091505b8382101562000183578582018301518183018401529082019062000164565b6000602085830101528094505050505092915050565b600080600080600060a08688031215620001b257600080fd5b85516020870151604088015191965094506001600160401b0380821115620001d957600080fd5b620001e789838a01620000e7565b94506060880151915080821115620001fe57600080fd5b6200020c89838a01620000e7565b935060808801519150808211156200022357600080fd5b506200023288828901620000e7565b9150509295509295909350565b600181811c908216806200025457607f821691505b6020821081036200027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002cb576000816000526020600020601f850160051c81016020861015620002a65750805b601f850160051c820191505b81811015620002c757828155600101620002b2565b5050505b505050565b81516001600160401b03811115620002ec57620002ec620000d1565b6200030481620002fd84546200023f565b846200027b565b602080601f8311600181146200033c5760008415620003235750858301515b600019600386901b1c1916600185901b178555620002c7565b600085815260208120601f198616915b828110156200036d578886015182559484019460019091019084016200034c565b50858210156200038c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61168780620003ac6000396000f3fe60806040526004361061014b5760003560e01c8063715018a6116100b6578063a8c5dc331161006f578063a8c5dc33146103d9578063b1ddb2e1146103f9578063b3f98adc14610419578063d16381d014610439578063d96a094a14610459578063f2fde38b1461046c57600080fd5b8063715018a6146102da5780637f7650eb146102ef57806381b72f16146103045780638da5cb5b146103605780638e9d660f14610392578063a1b9e1e6146103b257600080fd5b8063528a732b11610108578063528a732b14610220578063535483f014610240578063576c6d2b146102675780635962a9411461028e5780636b6f4a9d146102a45780636f072fbe146102ba57600080fd5b80630a5a7642146101505780630a98593014610179578063184b9695146101b1578063303d5f9f146101d35780633f7fb221146101e8578063456ecb201461020a575b600080fd5b34801561015c57600080fd5b5061016660035481565b6040519081526020015b60405180910390f35b34801561018557600080fd5b50600654610199906001600160401b031681565b6040516001600160401b039091168152602001610170565b3480156101bd57600080fd5b506101c661048c565b604051610170919061117f565b3480156101df57600080fd5b506101c661051a565b3480156101f457600080fd5b506102086102033660046111a7565b610527565b005b34801561021657600080fd5b5061016660045481565b34801561022c57600080fd5b5061020861023b366004611266565b610552565b34801561024c57600080fd5b5060065461019990600160801b90046001600160401b031681565b34801561027357600080fd5b5060015461019990600160a01b90046001600160401b031681565b34801561029a57600080fd5b5061016660075481565b3480156102b057600080fd5b5061016660055481565b3480156102c657600080fd5b50600254610199906001600160401b031681565b3480156102e657600080fd5b506102086107a3565b3480156102fb57600080fd5b506101c66107b7565b34801561031057600080fd5b5061032461031f3660046112be565b6107c4565b6040516101709190815181526020808301516001600160401b031690820152604080830151908201526060918201519181019190915260800190565b34801561036c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561039e57600080fd5b506102086103ad3660046112e8565b61085c565b3480156103be57600080fd5b5060065461019990600160401b90046001600160401b031681565b3480156103e557600080fd5b5060015461037a906001600160a01b031681565b34801561040557600080fd5b50610208610414366004611303565b610886565b34801561042557600080fd5b50610208610434366004611350565b610ad6565b34801561044557600080fd5b506102086104543660046111a7565b610d45565b610208610467366004611371565b610d7a565b34801561047857600080fd5b506102086104873660046112e8565b610fee565b600a80546104999061138a565b80601f01602080910402602001604051908101604052809291908181526020018280546104c59061138a565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b505050505081565b600980546104999061138a565b61052f611064565b6002805467ffffffffffffffff19166001600160401b0392909216919091179055565b6001336000908152600c602052604090205460ff166002811115610578576105786113c4565b036105dc5760405162461bcd60e51b815260206004820152602960248201527f596f75206e65656420746f207573652070726f64756374206265666f726520636044820152686f6d6d656e74696e6760b81b60648201526084015b60405180910390fd5b604080516001808252818301909252600091816020015b60608152602001906001900390816105f357905050604080513360208201529192500160405160208183030381529060405281600081518110610638576106386113da565b60209081029190910181019190915260408051610140810182526002546001600160401b0316815260009281018390528082018390526060810183905230608082015260a0810183905260c0810183905260e0810183905261010081018490526101208101859052600154915163b82916cb60e01b81529092916001600160a01b03169063b82916cb906106d090859060040161145e565b6020604051808303816000875af11580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610713919061158e565b6040805180820182526001600160401b0383811680835260016020808501918252336000818152600e83528790209551865493511515600160401b0268ffffffffffffffffff199094169516949094179190911790935592519283529293507f38e7ac93da30e97d39a4baa1731920b1ad90ffbce17f2b56368e2db812d502d9910160405180910390a250505050565b6107ab611064565b6107b560006110be565b565b600880546104999061138a565b6107f860405180608001604052806000815260200160006001600160401b0316815260200160008152602001600081525090565b506001600160a01b0382166000908152600b6020908152604080832084845282529182902082516080810184528154815260018201546001600160401b03169281019290925260028101549282019290925260039091015460608201525b92915050565b610864611064565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61088e611064565b6001600160a01b0382166000908152600c602052604081205460ff1660028111156108bb576108bb6113c4565b146108fd5760405162461bcd60e51b8152602060048201526012602482015271139bc8189d5e481bdc99195c88199bdd5b9960721b60448201526064016105d3565b604080516001808252818301909252600091816020015b606081526020019060019003908161091457905050604080513360208201529192500160405160208183030381529060405281600081518110610959576109596113da565b6020908102919091018101919091526001600160a01b038481166000908152600c83526040808220805460ff1916600190811790915581516101408101835290546001600160401b03600160a01b82041682529481018390528082018390526060810183905230608082015260a0810183905260c0810183905260e0810183905261010081018690526101208101879052905163b82916cb60e01b815290939192919091169063b82916cb90610a1390859060040161145e565b6020604051808303816000875af1158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a56919061158e565b336000908152600b60209081526040808320600654600160801b90046001600160401b0390811685529252808320600101805467ffffffffffffffff1916928516928317905551929350916001600160a01b038816917f37520ac2a4ab880e98ce03e67a94d1158eb0636fc92f3e74b088fce9d990eb7491a35050505050565b336000908152600b602090815260408083206006546001600160401b03600160801b9091048116855292529091206001015416610b735760405162461bcd60e51b815260206004820152603560248201527f596f752063616e206e6f7420766f746520756e74696c20796f752070726f647560448201527418dd081a185cc81899595b8819195b1a5d995c9959605a1b60648201526084016105d3565b336000908152600d602052604081205460ff166001811115610b9757610b976113c4565b03610bf4576000816001811115610bb057610bb06113c4565b03610bb85750565b600654610bcf906001600160401b0316600161110e565b50600654610bee90600160401b90046001600160401b03166001611121565b50610d09565b6001336000908152600d602052604090205460ff166001811115610c1a57610c1a6113c4565b03610c71576000816001811115610c3357610c336113c4565b03610c6e57600654610c4f906001600160401b03166001611121565b50600654610bee90600160401b90046001600160401b0316600161110e565b50565b336000908152600d60205260409020805482919060ff191660018381811115610c9c57610c9c6113c4565b02179055506000816001811115610cb557610cb56113c4565b03610cd157600654610c4f906001600160401b03166001611121565b600654610cef90600160401b90046001600160401b0316600161110e565b50600654610d07906001600160401b03166001611121565b505b7fb14236643441ae89f4e8db470337cc30657235a1e93464e4c0f919487f9af0e23382604051610d3a9291906115ab565b60405180910390a150565b610d4d611064565b600180546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b336000908152600c602052604081205460ff166002811115610d9e57610d9e6113c4565b14610e045760405162461bcd60e51b815260206004820152603060248201527f596f752063616e277420706c61636520616e206f72646572207768696c65206160448201526f77616974696e672064656c697665727960801b60648201526084016105d3565b806003541015610e4c5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073746f636b2160681b60448201526064016105d3565b6000610e636004548361112d90919063ffffffff16565b9050600454341015610eb75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207061796d656e742073656e742100000000000060448201526064016105d3565b60068054600160801b90046001600160401b0316906010610ed7836115ee565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610f118260035461110e90919063ffffffff16565b600390815560408051608081018252428152600060208083018281528385018881526004546060860190815233808652600b8552878620600680546001600160401b03600160801b9182900481168a529288528a892099518a55955160018a01805467ffffffffffffffff19169184169190911790559351600289015591519690980195909555868452600c835292859020805460ff1916905591548451878152918201889052845192900490921693927fa2fc0bd51a5bc3589d1bbf031bceaabcd269febe30c17d6a0d84255c586004e1928290030190a35050565b610ff6611064565b6001600160a01b03811661105b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b610c6e816110be565b6000546001600160a01b031633146107b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061111a8284611614565b9392505050565b600061111a8284611627565b600061111a828461163a565b6000815180845260005b8181101561115f57602081850181015186830182015201611143565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061111a6020830184611139565b6001600160401b0381168114610c6e57600080fd5b6000602082840312156111b957600080fd5b813561111a81611192565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111eb57600080fd5b81356001600160401b0380821115611205576112056111c4565b604051601f8301601f19908116603f0116810190828211818310171561122d5761122d6111c4565b8160405283815286602085880101111561124657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561127857600080fd5b81356001600160401b0381111561128e57600080fd5b61129a848285016111da565b949350505050565b80356001600160a01b03811681146112b957600080fd5b919050565b600080604083850312156112d157600080fd5b6112da836112a2565b946020939093013593505050565b6000602082840312156112fa57600080fd5b61111a826112a2565b6000806040838503121561131657600080fd5b61131f836112a2565b915060208301356001600160401b0381111561133a57600080fd5b611346858286016111da565b9150509250929050565b60006020828403121561136257600080fd5b81356002811061111a57600080fd5b60006020828403121561138357600080fd5b5035919050565b600181811c9082168061139e57607f821691505b6020821081036113be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60048110611400576114006113c4565b9052565b60008282518085526020808601955060208260051b8401016020860160005b8481101561145157601f1986840301895261143f838351611139565b98840198925090830190600101611423565b5090979650505050505050565b608081526114786080820183516001600160401b03169052565b6000602083015161149460a08401826001600160401b03169052565b5060408301516001600160401b0390811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a085015191506101206114ec818601846001600160401b03169052565b60c08601519250610140611502818701856113f0565b60e0870151151561016087015282870151610180870191909152925061152c6101c0860184611404565b90860151858203607f19016101a0870152909250905061154c8282611139565b9150508281036020840152611565816000815260200190565b83810360408501526000815290506020810183810360608501526000815290506020810161129a565b6000602082840312156115a057600080fd5b815161111a81611192565b6001600160a01b038316815260408101600283106115cb576115cb6113c4565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361160a5761160a6115d8565b6001019392505050565b81810381811115610856576108566115d8565b80820180821115610856576108566115d8565b8082028115828204841417610856576108566115d856fea26469706673582212200975347dae9b9db79689822ac4003a7b8eb2bb193e7f16c17c471390b91942d364736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063715018a6116100b6578063a8c5dc331161006f578063a8c5dc33146103d9578063b1ddb2e1146103f9578063b3f98adc14610419578063d16381d014610439578063d96a094a14610459578063f2fde38b1461046c57600080fd5b8063715018a6146102da5780637f7650eb146102ef57806381b72f16146103045780638da5cb5b146103605780638e9d660f14610392578063a1b9e1e6146103b257600080fd5b8063528a732b11610108578063528a732b14610220578063535483f014610240578063576c6d2b146102675780635962a9411461028e5780636b6f4a9d146102a45780636f072fbe146102ba57600080fd5b80630a5a7642146101505780630a98593014610179578063184b9695146101b1578063303d5f9f146101d35780633f7fb221146101e8578063456ecb201461020a575b600080fd5b34801561015c57600080fd5b5061016660035481565b6040519081526020015b60405180910390f35b34801561018557600080fd5b50600654610199906001600160401b031681565b6040516001600160401b039091168152602001610170565b3480156101bd57600080fd5b506101c661048c565b604051610170919061117f565b3480156101df57600080fd5b506101c661051a565b3480156101f457600080fd5b506102086102033660046111a7565b610527565b005b34801561021657600080fd5b5061016660045481565b34801561022c57600080fd5b5061020861023b366004611266565b610552565b34801561024c57600080fd5b5060065461019990600160801b90046001600160401b031681565b34801561027357600080fd5b5060015461019990600160a01b90046001600160401b031681565b34801561029a57600080fd5b5061016660075481565b3480156102b057600080fd5b5061016660055481565b3480156102c657600080fd5b50600254610199906001600160401b031681565b3480156102e657600080fd5b506102086107a3565b3480156102fb57600080fd5b506101c66107b7565b34801561031057600080fd5b5061032461031f3660046112be565b6107c4565b6040516101709190815181526020808301516001600160401b031690820152604080830151908201526060918201519181019190915260800190565b34801561036c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561039e57600080fd5b506102086103ad3660046112e8565b61085c565b3480156103be57600080fd5b5060065461019990600160401b90046001600160401b031681565b3480156103e557600080fd5b5060015461037a906001600160a01b031681565b34801561040557600080fd5b50610208610414366004611303565b610886565b34801561042557600080fd5b50610208610434366004611350565b610ad6565b34801561044557600080fd5b506102086104543660046111a7565b610d45565b610208610467366004611371565b610d7a565b34801561047857600080fd5b506102086104873660046112e8565b610fee565b600a80546104999061138a565b80601f01602080910402602001604051908101604052809291908181526020018280546104c59061138a565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b505050505081565b600980546104999061138a565b61052f611064565b6002805467ffffffffffffffff19166001600160401b0392909216919091179055565b6001336000908152600c602052604090205460ff166002811115610578576105786113c4565b036105dc5760405162461bcd60e51b815260206004820152602960248201527f596f75206e65656420746f207573652070726f64756374206265666f726520636044820152686f6d6d656e74696e6760b81b60648201526084015b60405180910390fd5b604080516001808252818301909252600091816020015b60608152602001906001900390816105f357905050604080513360208201529192500160405160208183030381529060405281600081518110610638576106386113da565b60209081029190910181019190915260408051610140810182526002546001600160401b0316815260009281018390528082018390526060810183905230608082015260a0810183905260c0810183905260e0810183905261010081018490526101208101859052600154915163b82916cb60e01b81529092916001600160a01b03169063b82916cb906106d090859060040161145e565b6020604051808303816000875af11580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610713919061158e565b6040805180820182526001600160401b0383811680835260016020808501918252336000818152600e83528790209551865493511515600160401b0268ffffffffffffffffff199094169516949094179190911790935592519283529293507f38e7ac93da30e97d39a4baa1731920b1ad90ffbce17f2b56368e2db812d502d9910160405180910390a250505050565b6107ab611064565b6107b560006110be565b565b600880546104999061138a565b6107f860405180608001604052806000815260200160006001600160401b0316815260200160008152602001600081525090565b506001600160a01b0382166000908152600b6020908152604080832084845282529182902082516080810184528154815260018201546001600160401b03169281019290925260028101549282019290925260039091015460608201525b92915050565b610864611064565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61088e611064565b6001600160a01b0382166000908152600c602052604081205460ff1660028111156108bb576108bb6113c4565b146108fd5760405162461bcd60e51b8152602060048201526012602482015271139bc8189d5e481bdc99195c88199bdd5b9960721b60448201526064016105d3565b604080516001808252818301909252600091816020015b606081526020019060019003908161091457905050604080513360208201529192500160405160208183030381529060405281600081518110610959576109596113da565b6020908102919091018101919091526001600160a01b038481166000908152600c83526040808220805460ff1916600190811790915581516101408101835290546001600160401b03600160a01b82041682529481018390528082018390526060810183905230608082015260a0810183905260c0810183905260e0810183905261010081018690526101208101879052905163b82916cb60e01b815290939192919091169063b82916cb90610a1390859060040161145e565b6020604051808303816000875af1158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a56919061158e565b336000908152600b60209081526040808320600654600160801b90046001600160401b0390811685529252808320600101805467ffffffffffffffff1916928516928317905551929350916001600160a01b038816917f37520ac2a4ab880e98ce03e67a94d1158eb0636fc92f3e74b088fce9d990eb7491a35050505050565b336000908152600b602090815260408083206006546001600160401b03600160801b9091048116855292529091206001015416610b735760405162461bcd60e51b815260206004820152603560248201527f596f752063616e206e6f7420766f746520756e74696c20796f752070726f647560448201527418dd081a185cc81899595b8819195b1a5d995c9959605a1b60648201526084016105d3565b336000908152600d602052604081205460ff166001811115610b9757610b976113c4565b03610bf4576000816001811115610bb057610bb06113c4565b03610bb85750565b600654610bcf906001600160401b0316600161110e565b50600654610bee90600160401b90046001600160401b03166001611121565b50610d09565b6001336000908152600d602052604090205460ff166001811115610c1a57610c1a6113c4565b03610c71576000816001811115610c3357610c336113c4565b03610c6e57600654610c4f906001600160401b03166001611121565b50600654610bee90600160401b90046001600160401b0316600161110e565b50565b336000908152600d60205260409020805482919060ff191660018381811115610c9c57610c9c6113c4565b02179055506000816001811115610cb557610cb56113c4565b03610cd157600654610c4f906001600160401b03166001611121565b600654610cef90600160401b90046001600160401b0316600161110e565b50600654610d07906001600160401b03166001611121565b505b7fb14236643441ae89f4e8db470337cc30657235a1e93464e4c0f919487f9af0e23382604051610d3a9291906115ab565b60405180910390a150565b610d4d611064565b600180546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b336000908152600c602052604081205460ff166002811115610d9e57610d9e6113c4565b14610e045760405162461bcd60e51b815260206004820152603060248201527f596f752063616e277420706c61636520616e206f72646572207768696c65206160448201526f77616974696e672064656c697665727960801b60648201526084016105d3565b806003541015610e4c5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073746f636b2160681b60448201526064016105d3565b6000610e636004548361112d90919063ffffffff16565b9050600454341015610eb75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207061796d656e742073656e742100000000000060448201526064016105d3565b60068054600160801b90046001600160401b0316906010610ed7836115ee565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610f118260035461110e90919063ffffffff16565b600390815560408051608081018252428152600060208083018281528385018881526004546060860190815233808652600b8552878620600680546001600160401b03600160801b9182900481168a529288528a892099518a55955160018a01805467ffffffffffffffff19169184169190911790559351600289015591519690980195909555868452600c835292859020805460ff1916905591548451878152918201889052845192900490921693927fa2fc0bd51a5bc3589d1bbf031bceaabcd269febe30c17d6a0d84255c586004e1928290030190a35050565b610ff6611064565b6001600160a01b03811661105b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b610c6e816110be565b6000546001600160a01b031633146107b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061111a8284611614565b9392505050565b600061111a8284611627565b600061111a828461163a565b6000815180845260005b8181101561115f57602081850181015186830182015201611143565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061111a6020830184611139565b6001600160401b0381168114610c6e57600080fd5b6000602082840312156111b957600080fd5b813561111a81611192565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111eb57600080fd5b81356001600160401b0380821115611205576112056111c4565b604051601f8301601f19908116603f0116810190828211818310171561122d5761122d6111c4565b8160405283815286602085880101111561124657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561127857600080fd5b81356001600160401b0381111561128e57600080fd5b61129a848285016111da565b949350505050565b80356001600160a01b03811681146112b957600080fd5b919050565b600080604083850312156112d157600080fd5b6112da836112a2565b946020939093013593505050565b6000602082840312156112fa57600080fd5b61111a826112a2565b6000806040838503121561131657600080fd5b61131f836112a2565b915060208301356001600160401b0381111561133a57600080fd5b611346858286016111da565b9150509250929050565b60006020828403121561136257600080fd5b81356002811061111a57600080fd5b60006020828403121561138357600080fd5b5035919050565b600181811c9082168061139e57607f821691505b6020821081036113be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60048110611400576114006113c4565b9052565b60008282518085526020808601955060208260051b8401016020860160005b8481101561145157601f1986840301895261143f838351611139565b98840198925090830190600101611423565b5090979650505050505050565b608081526114786080820183516001600160401b03169052565b6000602083015161149460a08401826001600160401b03169052565b5060408301516001600160401b0390811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a085015191506101206114ec818601846001600160401b03169052565b60c08601519250610140611502818701856113f0565b60e0870151151561016087015282870151610180870191909152925061152c6101c0860184611404565b90860151858203607f19016101a0870152909250905061154c8282611139565b9150508281036020840152611565816000815260200190565b83810360408501526000815290506020810183810360608501526000815290506020810161129a565b6000602082840312156115a057600080fd5b815161111a81611192565b6001600160a01b038316815260408101600283106115cb576115cb6113c4565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361160a5761160a6115d8565b6001019392505050565b81810381811115610856576108566115d8565b80820180821115610856576108566115d8565b8082028115828204841417610856576108566115d856fea26469706673582212200975347dae9b9db79689822ac4003a7b8eb2bb193e7f16c17c471390b91942d364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 638,
        "contract": "contracts/Store.sol:Product",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1181,
        "contract": "contracts/Store.sol:Product",
        "label": "spInstance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISP)495"
      },
      {
        "astId": 1183,
        "contract": "contracts/Store.sol:Product",
        "label": "schemaId_Invoice",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 1185,
        "contract": "contracts/Store.sol:Product",
        "label": "schemaId_Comment",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 1193,
        "contract": "contracts/Store.sol:Product",
        "label": "totalAvailableStoke",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1195,
        "contract": "contracts/Store.sol:Product",
        "label": "pricePerOne",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1197,
        "contract": "contracts/Store.sol:Product",
        "label": "discount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1199,
        "contract": "contracts/Store.sol:Product",
        "label": "upVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 1201,
        "contract": "contracts/Store.sol:Product",
        "label": "downVotes",
        "offset": 8,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 1203,
        "contract": "contracts/Store.sol:Product",
        "label": "trxIndex",
        "offset": 16,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 1205,
        "contract": "contracts/Store.sol:Product",
        "label": "totalPurchases",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1207,
        "contract": "contracts/Store.sol:Product",
        "label": "productName",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1209,
        "contract": "contracts/Store.sol:Product",
        "label": "StoreName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 1211,
        "contract": "contracts/Store.sol:Product",
        "label": "productImageUrl",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1218,
        "contract": "contracts/Store.sol:Product",
        "label": "customerHistory",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PurchaseDetails)1723_storage))"
      },
      {
        "astId": 1223,
        "contract": "contracts/Store.sol:Product",
        "label": "customerCurShoppingStatus",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_enum(ShoppingStatus)1711)"
      },
      {
        "astId": 1228,
        "contract": "contracts/Store.sol:Product",
        "label": "customerVote",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_enum(VotesType)1714)"
      },
      {
        "astId": 1233,
        "contract": "contracts/Store.sol:Product",
        "label": "buyerCommented",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(CommentDetails)1728_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISP)495": {
        "encoding": "inplace",
        "label": "contract ISP",
        "numberOfBytes": "20"
      },
      "t_enum(ShoppingStatus)1711": {
        "encoding": "inplace",
        "label": "enum ShoppingStatus",
        "numberOfBytes": "1"
      },
      "t_enum(VotesType)1714": {
        "encoding": "inplace",
        "label": "enum VotesType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(ShoppingStatus)1711)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum ShoppingStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ShoppingStatus)1711"
      },
      "t_mapping(t_address,t_enum(VotesType)1714)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum VotesType)",
        "numberOfBytes": "32",
        "value": "t_enum(VotesType)1714"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PurchaseDetails)1723_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PurchaseDetails))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PurchaseDetails)1723_storage)"
      },
      "t_mapping(t_address,t_struct(CommentDetails)1728_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CommentDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(CommentDetails)1728_storage"
      },
      "t_mapping(t_uint256,t_struct(PurchaseDetails)1723_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PurchaseDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(PurchaseDetails)1723_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CommentDetails)1728_storage": {
        "encoding": "inplace",
        "label": "struct CommentDetails",
        "members": [
          {
            "astId": 1725,
            "contract": "contracts/Store.sol:Product",
            "label": "attestationId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1727,
            "contract": "contracts/Store.sol:Product",
            "label": "hasCommented",
            "offset": 8,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PurchaseDetails)1723_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseDetails",
        "members": [
          {
            "astId": 1716,
            "contract": "contracts/Store.sol:Product",
            "label": "timeOfPurchase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1718,
            "contract": "contracts/Store.sol:Product",
            "label": "attestationId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1720,
            "contract": "contracts/Store.sol:Product",
            "label": "quantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1722,
            "contract": "contracts/Store.sol:Product",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}